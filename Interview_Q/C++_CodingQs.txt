


//Memory Usage: 12.9 MB, less than 98.51% of C++ online submissions for First Unique Character in a String.
class Solution {
public:
    int firstUniqChar(string s) {
        int n = s.size();
        
        vector<int> count(26);
        
        for(char c : s){
            count[c-'a'] += 1;
        }
        
        for(int i = 0; i < n; i++){
            if(count[s[i]-'a'] == 1) return i;
        }
        
        return -1;
    }
};

------------------------------------------------
#include <iostream>
using namespace std;
class C{
  public: 
 C & operator++()
 {
     cout<<"uzm"<<endl;
     return *this;
 }
};
int main() {
    // Write C++ code here
C c;
++c;


    return 0;
}
----------------------------------------------------------------
1) Given pointers to the heads of two sorted linked lists, merge them into a single, sorted linked list. Either head pointer may be null meaning that the corresponding list is empty.
-->  
/* C++ program to merge two sorted linked lists */
#include <bits/stdc++.h>
using namespace std;

/* Link list node */
class Node {
public:
	int data;
	Node* next;
};

/* pull of the front node of
the source and put it in dest */
void MoveNode(Node** destRef, Node** sourceRef);

/* Takes two lists sorted in increasing
order, and splices their nodes together
to make one big sorted list which
is returned. */
Node* SortedMerge(Node* a, Node* b)
{
	/* a dummy first node to hang the result on */
	Node dummy;

	/* tail points to the last result node */
	Node* tail = &dummy;

	/* so tail->next is the place to
	add new nodes to the result. */
	dummy.next = NULL;
	while (1) {
		if (a == NULL) {
			/* if either list runs out, use the
			other list */
			tail->next = b;
			break;
		}
		else if (b == NULL) {
			tail->next = a;
			break;
		}
		if (a->data <= b->data)
			MoveNode(&(tail->next), &a);
		else
			MoveNode(&(tail->next), &b);

		tail = tail->next;
	}
	return (dummy.next);
}

/* UTILITY FUNCTIONS */
/* MoveNode() function takes the
node from the front of the source,
and move it to the front of the dest.
It is an error to call this with the
source list empty.

Before calling MoveNode():
source == {1, 2, 3}
dest == {1, 2, 3}

After calling MoveNode():
source == {2, 3}
dest == {1, 1, 2, 3} */
void MoveNode(Node** destRef, Node** sourceRef)
{
	/* the front source node */
	Node* newNode = *sourceRef;
	assert(newNode != NULL);

	/* Advance the source pointer */
	*sourceRef = newNode->next;

	/* Link the old dest of the new node */
	newNode->next = *destRef;

	/* Move dest to point to the new node */
	*destRef = newNode;
}

/* Function to insert a node at
the beginning of the linked list */
void push(Node** head_ref, int new_data)
{
	/* allocate node */
	Node* new_node = new Node();

	/* put in the data */
	new_node->data = new_data;

	/* link the old list of the new node */
	new_node->next = (*head_ref);

	/* move the head to point to the new node */
	(*head_ref) = new_node;
}

/* Function to print nodes in a given linked list */
void printList(Node* node)
{
	while (node != NULL) {
		cout << node->data << " ";
		node = node->next;
	}
}

/* Driver code*/
int main()
{
	/* Start with the empty list */
	Node* res = NULL;
	Node* a = NULL;
	Node* b = NULL;

	/* Let us create two sorted linked lists
	to test the functions
	Created lists, a: 5->10->15, b: 2->3->20 */
	push(&a, 15);
	push(&a, 10);
	push(&a, 5);

	push(&b, 20);
	push(&b, 3);
	push(&b, 2);

	/* Remove duplicates from linked list */
	res = SortedMerge(a, b);

	cout << "Merged Linked List is: \n";
	printList(res);

	return 0;
}
Output : Merged Linked List is: 
	 2 3 5 10 15 20 
---------------------------------------------
/*Given two sorted linked lists consisting of N and M nodes
respectively. The task is to merge both of the list
(in-place) and return head of the merged list.*/
#include <bits/stdc++.h>
using namespace std;

/* Link list Node */
struct Node {
	int key;
	struct Node* next;
};

// Function to reverse a given Linked List using Recursion
Node* reverseList(Node* head)
{
	if (head->next == NULL)
		return head;
	Node* rest = reverseList(head->next);
	head->next->next = head;
	head->next = NULL;
	return rest;
}

// Given two non-empty linked lists 'a' and 'b'
Node* sortedMerge(Node* a, Node* b)
{
	// Reverse Linked List 'a'
	a = reverseList(a);
	// Reverse Linked List 'b'
	b = reverseList(b);
	// Initialize head of resultant list
	Node* head = NULL;
	Node* temp;
	// Traverse both lists while both of them
	// have nodes.
	while (a != NULL && b != NULL) {
		// If a's current value is greater than or equal to
		// b's current value.
		if (a->key >= b->key) {
			// Store next of current Node in first list
			temp = a->next;
			// Add 'a' at the front of resultant list
			a->next = head;
			// Make 'a' - head of the result list
			head = a;
			// Move ahead in first list
			a = temp;
		}

		// If b's value is greater. Below steps are similar
		// to above (Only 'a' is replaced with 'b')
		else {
			temp = b->next;
			b->next = head;
			head = b;
			b = temp;
		}
	}

	// If second list reached end, but first list has
	// nodes. Add remaining nodes of first list at the
	// beginning of result list
	while (a != NULL) {
		temp = a->next;
		a->next = head;
		head = a;
		a = temp;
	}

	// If first list reached end, but second list has
	// nodes. Add remaining nodes of second list at the
	// beginning of result list
	while (b != NULL) {
		temp = b->next;
		b->next = head;
		head = b;
		b = temp;
	}
	// Return the head of the result list
	return head;
}

/* Function to print Nodes in a given linked list */
void printList(struct Node* Node)
{
	while (Node != NULL) {
		cout << Node->key << " ";
		Node = Node->next;
	}
}

/* Utility function to create a new node with
given key */
Node* newNode(int key)
{
	Node* temp = new Node;
	temp->key = key;
	temp->next = NULL;
	return temp;
}

/* Driver program to test above functions*/
int main()
{
	/* Start with the empty list */
	struct Node* res = NULL;

	/* Let us create two sorted linked lists to test
	the above functions. Created lists shall be
		a: 5->10->15->40
		b: 2->3->20 */
	Node* a = newNode(5);
	a->next = newNode(10);
	a->next->next = newNode(15);
	a->next->next->next = newNode(40);

	Node* b = newNode(2);
	b->next = newNode(3);
	b->next->next = newNode(20);

	/* merge 2 sorted Linked Lists */
	res = sortedMerge(a, b);

	cout << "Merged Linked List is:" << endl;
	printList(res);

	return 0;
}
Output : Merged Linked List is:
	2 3 5 10 15 20 40 
----------------------------------------
1) Write a Java Program to reverse a string without using String inbuilt function.
// C++ program to reverse a string
// using first to last approach
// 'for' loop
#include <bits/stdc++.h>
using namespace std;

// Function to reverse a string
void reverseStr(string& str)
{
	int n = str.length();

	// Swap character starting from two
	// corners
	for (int i = 0; i < n / 2; i++)
		swap(str[i], str[n - i - 1]);
}

// Driver program
int main()
{
	string str = "geeksforgeeks";
	reverseStr(str);
	cout << str;
	return 0;
}
Output : skeegrofskeeg

Complexity Analysis:
Time Complexity: O(N)
Auxiliary Space: O(1)
-----------------------------
#include <bits/stdc++.h>
using namespace std;

// Function to reverse a string
void reverseStr(string& str)
{
	int len = str.length();
	int n = len-1;
	int i = 0;
	while(i<=n){
		//Using the swap method to switch values at each index
		swap(str[i],str[n]);
		n = n-1;
		i = i+1;
}

}

// Driver program
int main()
{
	string str = "geeksforgeeks";
	reverseStr(str);
	cout << str;
	return 0;
}
Complexity Analysis:

Time Complexity: O(N)
Auxiliary Space: O(1)
----------------------------------

#include <bits/stdc++.h>
using namespace std;

// Function to reverse a string
void reverse(string str)
{
	for (int i = str.length() - 1; i >= 0; i--)
		cout << str[i];
}

// Driver code
int main(void)
{
	string s = "GeeksforGeeks";
	reverse(s);
	return (0);
}
Output: skeeGrofskeeG

Complexity Analysis:
Time Complexity: O(N)
Auxiliary Space: O(1)
----------------------------------
 Using one pointer approach in recursion
#include <iostream>
using namespace std;
void getreverse(string &str, int i)
{
	if (i > (str.length() - 1 - i))
	{
		return;
	}
	swap(str[i], str[str.length() - i - 1]);
	i++;
	getreverse(str, i);
}
int main()
{
	string name = "geeksforgeeks";

	getreverse(name, 0);
	cout << name << endl;
	return 0;
}
-------------------------------------------
 Reverse a String Using the Constructor 
// string using constructor
#include <bits/stdc++.h>
using namespace std;
int main()
{
	string str = "GeeksforGeeks";

	// Use of reverse iterators
	string rev = string(str.rbegin(), str.rend());

	cout << rev << endl;
	return 0;
}
Complexity Analysis:
Time Complexity: O(N)
Auxiliary Space: O(1)
-----------------------------------------
Using a Temporary String
// reversing of string
// using temporary string
#include <bits/stdc++.h>
using namespace std;
int main()
{

	string str = "GeeksforGeeks";
	int n = str.length();

	// Temporary string to store the reverse
	string rev;

	for (int i = n - 1; i >= 0; i--)
		rev.push_back(str[i]);

	cout << rev << endl;
	return 0;
}
---------------------------------------
Using Stack Data Structure
#include <bits/stdc++.h>
using namespace std;
int main()
{
	string s = "GeeksforGeeks";
	stack<char> st;
	for (char x : s)
		st.push(x);
	while (!st.empty()) {
		cout << st.top();
		st.pop();
	}
	return 0;
}
Complexity Analysis:

Time Complexity: O(N)
Auxiliary Space: O(N)
------------------------------------------------------------------------
2) Write a Java Program to swap two numbers without using the third
// C++ Program to swap two numbers without
// using temporary variable
#include <bits/stdc++.h>
using namespace std;

int main()
{
	int x = 10, y = 5;

	// Code to swap 'x' and 'y'
	x = x + y; // x now becomes 15
	y = x - y; // y becomes 10
	x = x - y; // x becomes 5
	cout << "After Swapping: x =" << x << ", y=" << y;
}
After Swapping: x =5, y=10
Time Complexity: O(1).
Auxiliary Space: O(1).
--------------------------------------------
// C++ Program to swap two numbers without using temporary
// variable
#include <bits/stdc++.h>
using namespace std;

int main()
{ // NOTE - for this code to work in a generalised sense, y
// !- 0 to prevent zero division
	int x = 10, y = 5;

	// Code to swap 'x' and 'y'
	x = x * y; // x now becomes 50
	y = x / y; // y becomes 10
	x = x / y; // x becomes 5
	cout << "After Swapping: x =" << x << ", y=" << y;
}
Time Complexity: O(1).
Auxiliary Space: O(1).
----------------------------------------
// C++ code to swap using XOR
#include <bits/stdc++.h>

using namespace std;

int main()
{
	int x = 10, y = 5;
	// Code to swap 'x' (1010) and 'y' (0101)
	x = x ^ y; // x now becomes 15 (1111)
	y = x ^ y; // y becomes 10 (1010)
	x = x ^ y; // x becomes 5 (0101)
	cout << "After Swapping: x =" << x << ", y=" << y;
	return 0;
}
Problems with the above methods 
1) The multiplication and division-based approach doesn’t work if one of the numbers is 0 as the product becomes 0 irrespective of the other number.
2) Both Arithmetic solutions may cause an arithmetic overflow. If x and y are too large, addition and multiplication may go out of the integer range.
3) When we use pointers to variable and make a function swap, all the above methods fail when both pointers point to the same variable. Let’s take a look at what will happen in this case if both are pointing to the same variable.

// Bitwise XOR based method 
x = x ^ x; // x becomes 0 
x = x ^ x; // x remains 0 
x = x ^ x; // x remains 0
// Arithmetic based method 
x = x + x; // x becomes 2x 
x = x – x; // x becomes 0 
x = x – x; // x remains 0
-->
#include <bits/stdc++.h>
using namespace std;
void swap(int* xp, int* yp)
{
	*xp = *xp ^ *yp;
	*yp = *xp ^ *yp;
	*xp = *xp ^ *yp;
}

// Driver code
int main()
{
	int x = 10;
	swap(&x, &x);
	cout << "After swap(&x, &x): x = " << x;
	return 0;
}
-------------------------------
#include <iostream>
using namespace std;

int main(){
	int x = 10, y = 5;
	x = (x * y) / (y = x);
	cout << x << " " << y;
	return 0;
}

Output : 5  10 
Time Complexity: O(1)
Auxiliary Space: O(1)

------------------------------------------------------------------------
5) Write a Java Program to find whether a number is prime or not
--> // A school method based C++ program to check if a
// number is prime
#include <bits/stdc++.h>
using namespace std;

bool isPrime(int n)
{
	// Corner case
	if (n <= 1)
		return false;

	// Check from 2 to n-1
	for (int i = 2; i < n; i++)
		if (n % i == 0)
			return false;

	return true;
}

// Driver Program to test above function
int main()
{
	isPrime(11) ? cout << " true\n" : cout << " false\n";
	isPrime(15) ? cout << " true\n" : cout << " false\n";
	return 0;
}
 true
 false
Time Complexity: O(n) 
Auxiliary Space: O(1)
--------------------------------------------------
// C++ program to check
// if a number is prime
#include <bits/stdc++.h>
using namespace std;

bool isPrime(int n)
{
	// Corner cases
	if (n <= 1)
		return false;
//suppose n=7 that is prime and its pair are (1,7)
//so if a no. is prime then it can be check by numbers smaller than square root
// of the n
	for (int i = 2; i * i <= n; i++) {
		if (n % i == 0)
			return false;
	}
	return true;
}

// Driver Program to test above function
int main()
{
	isPrime(4191) ? cout << " true\n" : cout << " false\n";
	isPrime(15) ? cout << " true\n" : cout << " false\n";
	return 0;
}
Output : false
 false
Time Complexity: O(sqrt(n)) 
Auxiliary Space: O(1)
--------------------------------------------------
6) Write a Java Program to find whether a string or number is palindrome or not
--> // C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function to check whether
// the string is palindrome
string isPalindrome(string S)
{
	// Stores the reverse of the
	// string S
	string P = S;

	// Reverse the string P
	reverse(P.begin(), P.end());

	// If S is equal to P
	if (S == P) {
		// Return "Yes"
		return "Yes";
	}
	// Otherwise
	else {
		// return "No"
		return "No";
	}
}

// Driver Code
int main()
{
	string S = "ABCDCBA";
	cout << isPalindrome(S);

	return 0;
}
 Output : Yes
Time Complexity: O(N)
Auxiliary Space: O(N)
---------------------------------------------------
// C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function to check whether string
// is palindrome
string isPalindrome(string S)
{
	// Iterate over the range [0, N/2]
	for (int i = 0; i < S.length() / 2; i++) {

		// If S[i] is not equal to
		// the S[N-i-1]
		if (S[i] != S[S.length() - i - 1]) {
			// Return No
			return "No";
		}
	}
	// Return "Yes"
	return "Yes";
}

// Driver Code
int main()
{
	string S = "ABCDCBA";
	cout << isPalindrome(S);

	return 0;
}
Output: Yes
Time Complexity: O(N)
Auxiliary Space: O(1)
------------------------------------------------------------------------
7) Write a Java Program for Fibonacci series.
--> // Fibonacci Series using Recursion
#include <bits/stdc++.h>
using namespace std;

int fib(int n)
{
	if (n <= 1)
		return n;
	return fib(n - 1) + fib(n - 2);
}

int main()
{
	int n = 9;
	cout << fib(n);
	getchar();
	return 0;
}
-----------------------------------------------
// Fibonacci Series using Dynamic Programming
public class fibonacci
{
static int fib(int n)
	{
	/* Declare an array to store Fibonacci numbers. */
	int f[] = new int[n+2]; // 1 extra to handle case, n = 0
	int i;
	
	/* 0th and 1st number of the series are 0 and 1*/
	f[0] = 0;
	f[1] = 1;
	
	for (i = 2; i <= n; i++)
	{
	/* Add the previous 2 numbers in the series
		and store it */
		f[i] = f[i-1] + f[i-2];
	}
	
	return f[n];
	}
	
	public static void main (String args[])
	{
		int n = 9;
		System.out.println(fib(n));
	}
};
Output : 34
Time complexity: O(n) for given n
Auxiliary space: O(n)
-----------------------------------------------
// Java program for Fibonacci Series using Space
// Optimized Method
public class fibonacci
{
	static int fib(int n)
	{
		int a = 0, b = 1, c;
		if (n == 0)
			return a;
		for (int i = 2; i <= n; i++)
		{
			c = a + b;
			a = b;
			b = c;
		}
		return b;
	}

	public static void main (String args[])
	{
		int n = 9;
		System.out.println(fib(n));
	}
};

Output: 34
Time Complexity: O(n) 
Extra Space: O(1)
------------------------------------------
//Fibonacci Series using Optimized Method
public class fibonacci
{
	/* function that returns nth Fibonacci number */
	static int fib(int n)
	{
	int F[][] = new int[][]{{1,1},{1,0}};
	if (n == 0)
		return 0;
	power(F, n-1);
	
	return F[0][0];
	}
	
	static void multiply(int F[][], int M[][])
	{
	int x = F[0][0]*M[0][0] + F[0][1]*M[1][0];
	int y = F[0][0]*M[0][1] + F[0][1]*M[1][1];
	int z = F[1][0]*M[0][0] + F[1][1]*M[1][0];
	int w = F[1][0]*M[0][1] + F[1][1]*M[1][1];
	
	F[0][0] = x;
	F[0][1] = y;
	F[1][0] = z;
	F[1][1] = w;
	}
	
	/* Optimized version of power() in method 4 */
	static void power(int F[][], int n)
	{
	if( n == 0 || n == 1)
	return;
	int M[][] = new int[][]{{1,1},{1,0}};
	
	power(F, n/2);
	multiply(F, F);
	
	if (n%2 != 0)
	multiply(F, M);
	}
	
	/* Driver program to test above function */
	public static void main (String args[])
	{
		int n = 9;
	System.out.println(fib(n));
	}
};
/* This code is contributed by Rajat Mishra */

------------------------------------------
// C++ Program to find n'th fibonacci Number in
// with O(Log n) arithmetic operations
#include <bits/stdc++.h>
using namespace std;

const int MAX = 1000;

// Create an array for memoization
int f[MAX] = {0};

// Returns n'th fibonacci number using table f[]
int fib(int n)
{
	// Base cases
	if (n == 0)
		return 0;
	if (n == 1 || n == 2)
		return (f[n] = 1);

	// If fib(n) is already computed
	if (f[n])
		return f[n];

	int k = (n & 1)? (n+1)/2 : n/2;

	// Applying above formula [Note value n&1 is 1
	// if n is odd, else 0.
	f[n] = (n & 1)? (fib(k)*fib(k) + fib(k-1)*fib(k-1))
		: (2*fib(k-1) + fib(k))*fib(k);

	return f[n];
}

/* Driver program to test above function */
int main()
{
	int n = 9;
	printf("%d ", fib(n));
	return 0;
}


Output : 34 
Time Complexity: O(Log n), as we divide the problem in half in every recursive call.
Auxiliary Space: O(n)
---------------------------------------
// C++ Program to find n'th fibonacci Number
#include<iostream>
#include<cmath>

int fib(int n) {
double phi = (1 + sqrt(5)) / 2;
return round(pow(phi, n) / sqrt(5));
}

// Driver Code
int main ()
{
int n = 9;
std::cout << fib(n) << std::endl;
return 0;
}
Output: 34
Time Complexity: O(logn), this is because calculating phi^n takes logn time
Auxiliary Space: O(1)
-----------------------------------------------------------------
6) Program for Armstrong Numbers

#include <iostream>
using namespace std;

int main() {
		int n = 153;
		int temp = n;
		int p = 0;

		/*function to calculate
		the sum of individual digits
		*/
		while (n > 0) {

			int rem = n % 10;
			p = (p) + (rem * rem * rem);
			n = n / 10;
		}

		/* condition to check whether
		the value of P equals
		to user input or not. */
		if (temp == p) {
			cout<<("Yes. It is Armstrong No.");
		}
		else {
			cout<<("No. It is not an Armstrong No.");
		}
	return 0;
}
Output : Yes. It is Armstrong No.
Time complexity: O(log n)
Auxiliary Space:O(1)
------------------------------------------
// C++ program to determine whether the number is
// Armstrong number or not
#include <bits/stdc++.h>
using namespace std;

/* Function to calculate x raised to the power y */
int power(int x, unsigned int y)
{
	if (y == 0)
		return 1;
	if (y % 2 == 0)
		return power(x, y / 2) * power(x, y / 2);
	return x * power(x, y / 2) * power(x, y / 2);
}

/* Function to calculate order of the number */
int order(int x)
{
	int n = 0;
	while (x) {
		n++;
		x = x / 10;
	}
	return n;
}

// Function to check whether the given number is
// Armstrong number or not
bool isArmstrong(int x)
{
	// Calling order function
	int n = order(x);
	int temp = x, sum = 0;
	while (temp) {
		int r = temp % 10;
		sum += power(r, n);
		temp = temp / 10;
	}

	// If satisfies Armstrong condition
	return (sum == x);
}

// Driver Program
int main()
{
	int x = 153;
	cout << boolalpha << isArmstrong(x) << endl;
	x = 1253;
	cout << boolalpha << isArmstrong(x) << endl;
	return 0;
}
Output : true 
	 false
-------------------------------------------------------------------
3) Write a Java Program to count the number of words in a string using HashMap
/* C++ program to count no of words
from given input string. */
#include <bits/stdc++.h>
using namespace std;

#define OUT 0
#define IN 1

// returns number of words in str
unsigned countWords(char *str)
{
	int state = OUT;
	unsigned wc = 0; // word count

	// Scan all characters one by one
	while (*str)
	{
		// If next character is a separator, set the
		// state as OUT
		if (*str == ' ' || *str == '\n' || *str == '\t')
			state = OUT;

		// If next character is not a word separator and
		// state is OUT, then set the state as IN and
		// increment word count
		else if (state == OUT)
		{
			state = IN;
			++wc;
		}

		// Move to next character
		++str;
	}

	return wc;
}

// Driver code
int main(void)
{
	char str[] = "One two	 three\n four\tfive ";
	cout<<"No of words : "<<countWords(str);
	return 0;
}
No of words : 5
Time complexity: O(n)
Auxiliary Space: O(1)
-----------------------------------------
// C++ program to count total
// number of words in the string
#include <bits/stdc++.h>
using namespace std;

// Function to count total number
// of words in the string
int countWords(string str)
{
	// Check if the string is null
	// or empty then return zero
	if (str.size() == 0) {
		return 0;
	}
	// Splitting the string around
	// matches of the given regular
	// expression
	vector<string> words;
	string temp = "";
	for (int i = 0; i < str.size(); i++) {
		if (str[i] == ' ') {
		words.push_back(temp);
		temp = "";
		}
		else {
		temp += str[i];
		}
	}

	int count = 1;

	for (int i = 0; i < words.size(); i++) {
		if (words[i].size() != 0)
		count++;
	}

	// Return number of words
	// in the given string
	return count;
}

int main()
{

	// Given String str
	string str = "One two	 three\n four\tfive ";
	// Print the result
	cout << "No of words : " << countWords(str);
	return 0;
}
Time Complexity: O(N)
Auxiliary Space: O(1)
---------------------------------------
// C++ program to count total
// number of words in the string
#include <bits/stdc++.h>
using namespace std;

// Function to count total number
// of words in the string
int countWords(string s)
{

	// Check if the string is null
	// or empty then return zero
	if (s.empty())
		return 0;

	istringstream is(s);

	int count = 0;

	string line;

	while (getline(is, line, '/'))
		++count;

	return count;
}
int main()
{
	string str = "One/ two /	 three/n four/tfive ";

	// Print the result
	cout << "No of words: " << countWords(str) << endl;
}
--------------------------------------------------------------------------
4) Print all the duplicates in the input string

// C++ program to count all duplicates
// from string using hashing
#include <iostream>
using namespace std;
# define NO_OF_CHARS 256

class gfg
{
	public :
	
	/* Fills count array with
	frequency of characters */
	void fillCharCounts(char *str, int *count)
	{
		int i;
		for (i = 0; *(str + i); i++)
		count[*(str + i)]++;
	}

	/* Print duplicates present
	in the passed string */
	void printDups(char *str)
	{
		
		// Create an array of size 256 and fill
		// count of every character in it
		int *count = (int *)calloc(NO_OF_CHARS,
									sizeof(int));
		fillCharCounts(str, count);

		// Print characters having count more than 0
		int i;
		for (i = 0; i < NO_OF_CHARS; i++)
		if(count[i] > 1)
			printf("%c, count = %d \n", i, count[i]);

		free(count);
	}
};

/* Driver code*/
int main()
{
	gfg g ;
	char str[] = "test string";
	g.printDups(str);
	//getchar();
	return 0;
}

Output : s, count = 2 
	 t, count = 3 
Time Complexity: O(n), where n = length of the string passed
Space Complexity: O(NO_OF_CHARS)
------------------------------------------------
// C++ program to count all duplicates
// from string using maps
#include <bits/stdc++.h>
using namespace std;
void printDups(string str)
{
	map<char, int> count;
	for (int i = 0; i < str.length(); i++) {
		count[str[i]]++;
	}

	for (auto it : count) {
		if (it.second > 1)
			cout << it.first << ", count = " << it.second
				<< "\n";
	}
}
/* Driver code*/
int main()
{
	string str = "test string";
	printDups(str);
	return 0;
}
Output : s, count = 2
	 t, count = 3
Time Complexity: O(N*log(N)), where N = length of the string passed and it generally takes O(log(N)) time for an element insertion in a map. 
Space Complexity: O(K), where K = size of the map (0<=K<=input_string_length).
-----------------------------------------
// C++ program to count all duplicates
// from string using maps
#include <bits/stdc++.h>
using namespace std;
void printDups(string str)
{
	unordered_map<char, int> count;
	for (int i = 0; i < str.length(); i++) {
		count[str[i]]++; //increase the count of characters by 1
	}

	for (auto it : count) { //iterating through the unordered map
		if (it.second > 1) //if the count of characters is greater than 1 then duplicate found
			cout << it.first << ", count = " << it.second
				<< "\n";
	}
}
/* Driver code*/
int main()
{
	string str = "test string";
	printDups(str);
	return 0;
}
Output : s, count = 2
t, count = 3
Time Complexity: O(N), where N = length of the string passed and it takes O(1) time to insert and access any element in an unordered map
Auxiliary Space: O(K), where K = size of the map (0<=K<=input_string_length).






